//: Playground - noun: a place where people can play

import UIKit

/*
 可选链式调用是一种可以在当前值可能为nil的可选值上请求和调用属性、方法及下标的方法。如果可选值有值，那么调用就会成功；如果可选值是nil，那么调用将返回nil。多个调用可以连接在一起形成一个调用链，如果其中任何一个节点为nil，整个调用链都会失败，即返回nil。
 Swift的可选链式调用和OC中向nil发送消息有些相像，但是Swift的可选链式调用可以应用于任意类型，并且能检查调用是否成功
 */


/*
 使用可选链式调用代替强制展开
 通过在想调试的属性、方法、或下标的可选值后面放一个问号(?),可以定义一个可选链。这一点很像在可选值后面放一个感叹号(!)来强制展开它的值。它们的主要区别在于当可选值为空时可选链式调用只会失败，然而墙纸展开将会触发运行时错误。
 
 为了反映可选链式调用可以在空值(nil)上调用的事实，不论这个调用的属性、方法及下标返回的值是不是可选值，它的返回结果都是一个可选值。你可以利用这个返回值来判断你的可选链式调用是否调用成功，如果调用有返回值则说明调用成功，返回nil则说明调用失败。
 
 特别地，可选链式调用的返回结果与原来的返回结果具有相同的类型，但是被包装成了一个可选值。
 */


class Person {
    var residence: Residence?
}

class Residence {
    var numberOfRooms = 1
    
}

let john = Person()

if let roomCount = john.residence?.numberOfRooms {
    print("\(roomCount)")
}else {
    print("no")
}

/*
 为可选链式调用定义模型类
 通过使用可选链式调用可以调用多层属性、方法和下标。这样可以在复杂的模型中向下访问各种子属性，并且判断能否访问子属性的属性、方法或下标。
 */


/*
 通过可选链式调用访问属性
 可以通过可选链式调用在一个可选值上访问它的属性，并判断访问是否成功
 */


/*
 通过可选链式调用方法
 可以通过可选链式调用来调用方法，并判断是否调用成功，即使这个方法没有返回值
 */

func printNumberOfRooms() {
    print("the number of rooms is 4")
}

/*
 上述这个方法没有返回值。然而，没有返回值的方法具有隐式的返回类型Void。这意味着没有返回值的方法也会返回()，或者空的元组。
 
 如果在可选值上通过可选链式调用来调用这个方法，该方法的返回类型会是Void？，而不是Void，因为通过可选链式调用得到的返回值都是可选的。这样我们就可以使用if语句来判断能否成功调用printNumberOfRooms()方法，即使方法本身没有返回值。通过判断返回值是否为nil可以判断调用是否成功。
 */
